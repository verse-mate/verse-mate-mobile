// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteAdminBatchByBatchJobIdData, DeleteAdminBatchByBatchJobIdResponses, DeleteAdminExplanationByIdData, DeleteAdminExplanationByIdResponses, DeleteAdminExplanationsBulkData, DeleteAdminExplanationsBulkResponses, DeleteAdminExplanationsInactiveData, DeleteAdminExplanationsInactiveResponses, DeleteAdminPromptsSystemByIdData, DeleteAdminPromptsSystemByIdResponses, DeleteAdminPromptsUserByIdData, DeleteAdminPromptsUserByIdResponses, DeleteBibleBookBookmarkRemoveData, DeleteBibleBookBookmarkRemoveResponses, DeleteBibleBookDeleteChatByConversationIdData, DeleteBibleBookDeleteChatByConversationIdResponses, DeleteBibleHighlightByHighlightIdData, DeleteBibleHighlightByHighlightIdResponses, GetAdminBatchByBatchJobIdData, GetAdminBatchByBatchJobIdResponses, GetAdminBatchChildrenByParentIdData, GetAdminBatchChildrenByParentIdResponses, GetAdminBatchHistoryData, GetAdminBatchHistoryResponses, GetAdminBatchSummaryByParentIdData, GetAdminBatchSummaryByParentIdResponses, GetAdminCommentaryGradesData, GetAdminCommentaryGradesResponses, GetAdminExplanationByIdHistoryData, GetAdminExplanationByIdHistoryResponses, GetAdminExplanationRegenerateByRegenerationIdComparisonData, GetAdminExplanationRegenerateByRegenerationIdComparisonResponses, GetAdminExplanationsData, GetAdminExplanationsLanguagesData, GetAdminExplanationsLanguagesResponses, GetAdminExplanationsResponses, GetAdminPromptsExplanationExistingData, GetAdminPromptsExplanationExistingResponses, GetAdminPromptsExplanationTypesData, GetAdminPromptsExplanationTypesResponses, GetAdminPromptsSystemData, GetAdminPromptsSystemResponses, GetAdminPromptsUserData, GetAdminPromptsUserResponses, GetAdminStatsData, GetAdminStatsResponses, GetAdminUsersData, GetAdminUsersResponses, GetAuthResetPasswordVerifyData, GetAuthResetPasswordVerifyResponses, GetAuthSessionData, GetAuthSessionResponses, GetAuthUserData, GetAuthUserResponses, GetBibleBookBookmarksByUserIdData, GetBibleBookBookmarksByUserIdResponses, GetBibleBookByBookIdByChapterNumberData, GetBibleBookByBookIdByChapterNumberResponses, GetBibleBookExplanationByBookIdByChapterNumberData, GetBibleBookExplanationByBookIdByChapterNumberResponses, GetBibleBooksData, GetBibleBooksResponses, GetBibleChapterIdByBookIdByChapterNumberData, GetBibleChapterIdByBookIdByChapterNumberResponses, GetBibleHighlightsByUserIdByBookIdByChapterNumberData, GetBibleHighlightsByUserIdByBookIdByChapterNumberResponses, GetBibleHighlightsByUserIdData, GetBibleHighlightsByUserIdResponses, GetBibleLanguagesData, GetBibleLanguagesResponses, GetBibleTestamentsData, GetBibleTestamentsResponses, GetUserData, GetUserMeData, GetUserMeResponses, GetUserResponses, PatchAdminUserByIdAdminStatusData, PatchAdminUserByIdAdminStatusResponses, PatchUserPreferencesData, PatchUserPreferencesResponses, PostAdminBatchesMonitorAllData, PostAdminBatchesMonitorAllResponses, PostAdminBatchExplanationsData, PostAdminBatchExplanationsResponses, PostAdminBatchRephraseData, PostAdminBatchRephraseResponses, PostAdminBatchTranslateData, PostAdminBatchTranslateResponses, PostAdminCommentaryGradeData, PostAdminCommentaryGradeResponses, PostAdminExplanationRegenerateByRegenerationIdChooseData, PostAdminExplanationRegenerateByRegenerationIdChooseResponses, PostAdminExplanationRegenerateByRegenerationIdGenerateData, PostAdminExplanationRegenerateByRegenerationIdGenerateResponses, PostAdminExplanationRegenerateData, PostAdminExplanationRegenerateResponses, PostAdminExplanationsRefreshLanguageStatsData, PostAdminExplanationsRefreshLanguageStatsResponses, PostAdminExplanationsSetActiveAsDefaultData, PostAdminExplanationsSetActiveAsDefaultResponses, PostAdminExplanationsSetDefaultsActiveData, PostAdminExplanationsSetDefaultsActiveResponses, PostAdminExplanationsSetSpecificVersionActiveData, PostAdminExplanationsSetSpecificVersionActiveResponses, PostAdminMonitorBibleBatchByParentIdData, PostAdminMonitorBibleBatchByParentIdResponses, PostAdminPromptsPlaygroundData, PostAdminPromptsPlaygroundResponses, PostAdminPromptsRestoreDefaultsData, PostAdminPromptsRestoreDefaultsResponses, PostAdminPromptsSystemData, PostAdminPromptsSystemResponses, PostAdminPromptsUserData, PostAdminPromptsUserResponses, PostAuthChangePasswordData, PostAuthChangePasswordResponses, PostAuthForgotPasswordData, PostAuthForgotPasswordResponses, PostAuthLoginData, PostAuthLoginResponses, PostAuthLogoutAllData, PostAuthLogoutAllResponses, PostAuthLogoutData, PostAuthLogoutResponses, PostAuthResetPasswordData, PostAuthResetPasswordResponses, PostAuthSendEmailVerificationData, PostAuthSendEmailVerificationResponses, PostAuthSignupData, PostAuthSignupResponses, PostAuthVerifyEmailData, PostAuthVerifyEmailResponses, PostBibleBookAskVerseMateSaveAiMessageData, PostBibleBookAskVerseMateSaveAiMessageResponses, PostBibleBookAskVerseMateSaveUserMessageData, PostBibleBookAskVerseMateSaveUserMessageResponses, PostBibleBookBookmarkAddData, PostBibleBookBookmarkAddResponses, PostBibleBookBookmarkRemoveData, PostBibleBookBookmarkRemoveResponses, PostBibleBookChapterLastReadData, PostBibleBookChapterLastReadResponses, PostBibleBookChapterSaveLastReadData, PostBibleBookChapterSaveLastReadResponses, PostBibleBookConversationExistsData, PostBibleBookConversationExistsResponses, PostBibleBookConversationsHistoryData, PostBibleBookConversationsHistoryResponses, PostBibleBookExplanationRatingsData, PostBibleBookExplanationRatingsResponses, PostBibleBookExplanationSaveRatingData, PostBibleBookExplanationSaveRatingResponses, PostBibleBookMessagesHistoryData, PostBibleBookMessagesHistoryResponses, PostBibleBookNewConversationData, PostBibleBookNewConversationResponses, PostBibleHighlightAddData, PostBibleHighlightAddResponses, PostUserUpdateData, PostUserUpdateResponses, PutAdminPromptsSystemByIdData, PutAdminPromptsSystemByIdResponses, PutAdminPromptsSystemByIdStatusData, PutAdminPromptsSystemByIdStatusResponses, PutAdminPromptsUserByIdData, PutAdminPromptsUserByIdResponses, PutAdminPromptsUserByIdStatusData, PutAdminPromptsUserByIdStatusResponses, PutAuthProfileData, PutAuthProfileResponses, PutBibleBookExplanationUpdateRatingData, PutBibleBookExplanationUpdateRatingResponses, PutBibleHighlightByHighlightIdData, PutBibleHighlightByHighlightIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAuthUser = <ThrowOnError extends boolean = false>(options?: Options<GetAuthUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthUserResponses, unknown, ThrowOnError>({
        url: '/auth/user',
        ...options
    });
};

export const postAuthChangePassword = <ThrowOnError extends boolean = false>(options: Options<PostAuthChangePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthChangePasswordResponses, unknown, ThrowOnError>({
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

export const postAuthLogoutAll = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutAllData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLogoutAllResponses, unknown, ThrowOnError>({
        url: '/auth/logout-all',
        ...options
    });
};

export const postAuthSendEmailVerification = <ThrowOnError extends boolean = false>(options?: Options<PostAuthSendEmailVerificationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthSendEmailVerificationResponses, unknown, ThrowOnError>({
        url: '/auth/send-email-verification',
        ...options
    });
};

export const postAuthVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<PostAuthVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthVerifyEmailResponses, unknown, ThrowOnError>({
        url: '/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAuthSession = <ThrowOnError extends boolean = false>(options?: Options<GetAuthSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthSessionResponses, unknown, ThrowOnError>({
        url: '/auth/session',
        ...options
    });
};

export const putAuthProfile = <ThrowOnError extends boolean = false>(options: Options<PutAuthProfileData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAuthProfileResponses, unknown, ThrowOnError>({
        url: '/auth/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAuthSignup = <ThrowOnError extends boolean = false>(options: Options<PostAuthSignupData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthSignupResponses, unknown, ThrowOnError>({
        url: '/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthLoginResponses, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAuthForgotPassword = <ThrowOnError extends boolean = false>(options: Options<PostAuthForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthForgotPasswordResponses, unknown, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAuthResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostAuthResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAuthResetPasswordResponses, unknown, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAuthResetPasswordVerify = <ThrowOnError extends boolean = false>(options: Options<GetAuthResetPasswordVerifyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAuthResetPasswordVerifyResponses, unknown, ThrowOnError>({
        url: '/auth/reset-password-verify',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};

export const getUserMe = <ThrowOnError extends boolean = false>(options?: Options<GetUserMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserMeResponses, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

export const postUserUpdate = <ThrowOnError extends boolean = false>(options: Options<PostUserUpdateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserUpdateResponses, unknown, ThrowOnError>({
        url: '/user/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getBibleBooks = <ThrowOnError extends boolean = false>(options?: Options<GetBibleBooksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBibleBooksResponses, unknown, ThrowOnError>({
        url: '/bible/books',
        ...options
    });
};

export const getBibleLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetBibleLanguagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBibleLanguagesResponses, unknown, ThrowOnError>({
        url: '/bible/languages',
        ...options
    });
};

export const getBibleBookByBookIdByChapterNumber = <ThrowOnError extends boolean = false>(options: Options<GetBibleBookByBookIdByChapterNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleBookByBookIdByChapterNumberResponses, unknown, ThrowOnError>({
        url: '/bible/book/{bookId}/{chapterNumber}',
        ...options
    });
};

export const getBibleBookExplanationByBookIdByChapterNumber = <ThrowOnError extends boolean = false>(options: Options<GetBibleBookExplanationByBookIdByChapterNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleBookExplanationByBookIdByChapterNumberResponses, unknown, ThrowOnError>({
        url: '/bible/book/explanation/{bookId}/{chapterNumber}',
        ...options
    });
};

export const getBibleTestaments = <ThrowOnError extends boolean = false>(options?: Options<GetBibleTestamentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBibleTestamentsResponses, unknown, ThrowOnError>({
        url: '/bible/testaments',
        ...options
    });
};

export const getBibleChapterIdByBookIdByChapterNumber = <ThrowOnError extends boolean = false>(options: Options<GetBibleChapterIdByBookIdByChapterNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleChapterIdByBookIdByChapterNumberResponses, unknown, ThrowOnError>({
        url: '/bible/chapter-id/{bookId}/{chapterNumber}',
        ...options
    });
};

export const postBibleBookConversationsHistory = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookConversationsHistoryData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookConversationsHistoryResponses, unknown, ThrowOnError>({
        url: '/bible/book/conversations-history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookMessagesHistory = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookMessagesHistoryData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookMessagesHistoryResponses, unknown, ThrowOnError>({
        url: '/bible/book/messages-history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookConversationExists = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookConversationExistsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookConversationExistsResponses, unknown, ThrowOnError>({
        url: '/bible/book/conversation-exists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookNewConversation = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookNewConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookNewConversationResponses, unknown, ThrowOnError>({
        url: '/bible/book/new-conversation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookExplanationSaveRating = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookExplanationSaveRatingData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookExplanationSaveRatingResponses, unknown, ThrowOnError>({
        url: '/bible/book/explanation/save-rating',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putBibleBookExplanationUpdateRating = <ThrowOnError extends boolean = false>(options: Options<PutBibleBookExplanationUpdateRatingData, ThrowOnError>) => {
    return (options.client ?? client).put<PutBibleBookExplanationUpdateRatingResponses, unknown, ThrowOnError>({
        url: '/bible/book/explanation/update-rating',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookExplanationRatings = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookExplanationRatingsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookExplanationRatingsResponses, unknown, ThrowOnError>({
        url: '/bible/book/explanation/ratings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookChapterSaveLastRead = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookChapterSaveLastReadData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookChapterSaveLastReadResponses, unknown, ThrowOnError>({
        url: '/bible/book/chapter/save-last-read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookChapterLastRead = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookChapterLastReadData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookChapterLastReadResponses, unknown, ThrowOnError>({
        url: '/bible/book/chapter/last-read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookAskVerseMateSaveUserMessage = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookAskVerseMateSaveUserMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookAskVerseMateSaveUserMessageResponses, unknown, ThrowOnError>({
        url: '/bible/book/ask-verse-mate/save-user-message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postBibleBookAskVerseMateSaveAiMessage = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookAskVerseMateSaveAiMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookAskVerseMateSaveAiMessageResponses, unknown, ThrowOnError>({
        url: '/bible/book/ask-verse-mate/save-ai-message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteBibleBookDeleteChatByConversationId = <ThrowOnError extends boolean = false>(options: Options<DeleteBibleBookDeleteChatByConversationIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBibleBookDeleteChatByConversationIdResponses, unknown, ThrowOnError>({
        url: '/bible/book/delete-chat/{conversation_id}',
        ...options
    });
};

export const getBibleBookBookmarksByUserId = <ThrowOnError extends boolean = false>(options: Options<GetBibleBookBookmarksByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleBookBookmarksByUserIdResponses, unknown, ThrowOnError>({
        url: '/bible/book/bookmarks/{user_id}',
        ...options
    });
};

export const postBibleBookBookmarkAdd = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookBookmarkAddData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookBookmarkAddResponses, unknown, ThrowOnError>({
        url: '/bible/book/bookmark/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteBibleBookBookmarkRemove = <ThrowOnError extends boolean = false>(options: Options<DeleteBibleBookBookmarkRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBibleBookBookmarkRemoveResponses, unknown, ThrowOnError>({
        url: '/bible/book/bookmark/remove',
        ...options
    });
};

export const postBibleBookBookmarkRemove = <ThrowOnError extends boolean = false>(options: Options<PostBibleBookBookmarkRemoveData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleBookBookmarkRemoveResponses, unknown, ThrowOnError>({
        url: '/bible/book/bookmark/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getBibleHighlightsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetBibleHighlightsByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleHighlightsByUserIdResponses, unknown, ThrowOnError>({
        url: '/bible/highlights/{user_id}',
        ...options
    });
};

export const getBibleHighlightsByUserIdByBookIdByChapterNumber = <ThrowOnError extends boolean = false>(options: Options<GetBibleHighlightsByUserIdByBookIdByChapterNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBibleHighlightsByUserIdByBookIdByChapterNumberResponses, unknown, ThrowOnError>({
        url: '/bible/highlights/{user_id}/{book_id}/{chapter_number}',
        ...options
    });
};

export const postBibleHighlightAdd = <ThrowOnError extends boolean = false>(options: Options<PostBibleHighlightAddData, ThrowOnError>) => {
    return (options.client ?? client).post<PostBibleHighlightAddResponses, unknown, ThrowOnError>({
        url: '/bible/highlight/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteBibleHighlightByHighlightId = <ThrowOnError extends boolean = false>(options: Options<DeleteBibleHighlightByHighlightIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBibleHighlightByHighlightIdResponses, unknown, ThrowOnError>({
        url: '/bible/highlight/{highlight_id}',
        ...options
    });
};

export const putBibleHighlightByHighlightId = <ThrowOnError extends boolean = false>(options: Options<PutBibleHighlightByHighlightIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutBibleHighlightByHighlightIdResponses, unknown, ThrowOnError>({
        url: '/bible/highlight/{highlight_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patchUserPreferences = <ThrowOnError extends boolean = false>(options: Options<PatchUserPreferencesData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchUserPreferencesResponses, unknown, ThrowOnError>({
        url: '/user/preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminExplanationsLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetAdminExplanationsLanguagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminExplanationsLanguagesResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/languages',
        ...options
    });
};

export const postAdminExplanationsRefreshLanguageStats = <ThrowOnError extends boolean = false>(options?: Options<PostAdminExplanationsRefreshLanguageStatsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAdminExplanationsRefreshLanguageStatsResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/refresh-language-stats',
        ...options
    });
};

export const getAdminUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAdminUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminUsersResponses, unknown, ThrowOnError>({
        url: '/admin/users',
        ...options
    });
};

export const patchAdminUserByIdAdminStatus = <ThrowOnError extends boolean = false>(options: Options<PatchAdminUserByIdAdminStatusData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchAdminUserByIdAdminStatusResponses, unknown, ThrowOnError>({
        url: '/admin/user/{id}/admin-status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminBatchExplanations = <ThrowOnError extends boolean = false>(options: Options<PostAdminBatchExplanationsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminBatchExplanationsResponses, unknown, ThrowOnError>({
        url: '/admin/batch-explanations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminBatchRephrase = <ThrowOnError extends boolean = false>(options: Options<PostAdminBatchRephraseData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminBatchRephraseResponses, unknown, ThrowOnError>({
        url: '/admin/batch-rephrase',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminBatchTranslate = <ThrowOnError extends boolean = false>(options: Options<PostAdminBatchTranslateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminBatchTranslateResponses, unknown, ThrowOnError>({
        url: '/admin/batch-translate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAdminBatchByBatchJobId = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminBatchByBatchJobIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminBatchByBatchJobIdResponses, unknown, ThrowOnError>({
        url: '/admin/batch/{batchJobId}',
        ...options
    });
};

export const getAdminBatchByBatchJobId = <ThrowOnError extends boolean = false>(options: Options<GetAdminBatchByBatchJobIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminBatchByBatchJobIdResponses, unknown, ThrowOnError>({
        url: '/admin/batch/{batchJobId}',
        ...options
    });
};

export const getAdminBatchHistory = <ThrowOnError extends boolean = false>(options?: Options<GetAdminBatchHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminBatchHistoryResponses, unknown, ThrowOnError>({
        url: '/admin/batch-history',
        ...options
    });
};

export const getAdminBatchChildrenByParentId = <ThrowOnError extends boolean = false>(options: Options<GetAdminBatchChildrenByParentIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminBatchChildrenByParentIdResponses, unknown, ThrowOnError>({
        url: '/admin/batch-children/{parentId}',
        ...options
    });
};

export const postAdminMonitorBibleBatchByParentId = <ThrowOnError extends boolean = false>(options: Options<PostAdminMonitorBibleBatchByParentIdData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminMonitorBibleBatchByParentIdResponses, unknown, ThrowOnError>({
        url: '/admin/monitor-bible-batch/{parentId}',
        ...options
    });
};

export const postAdminBatchesMonitorAll = <ThrowOnError extends boolean = false>(options?: Options<PostAdminBatchesMonitorAllData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAdminBatchesMonitorAllResponses, unknown, ThrowOnError>({
        url: '/admin/batches/monitor-all',
        ...options
    });
};

export const getAdminBatchSummaryByParentId = <ThrowOnError extends boolean = false>(options: Options<GetAdminBatchSummaryByParentIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminBatchSummaryByParentIdResponses, unknown, ThrowOnError>({
        url: '/admin/batch-summary/{parentId}',
        ...options
    });
};

export const deleteAdminExplanationById = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminExplanationByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminExplanationByIdResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/{id}',
        ...options
    });
};

export const postAdminExplanationRegenerate = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationRegenerateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationRegenerateResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/regenerate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminExplanationRegenerateByRegenerationIdGenerate = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationRegenerateByRegenerationIdGenerateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationRegenerateByRegenerationIdGenerateResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/regenerate/{regenerationId}/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminExplanationRegenerateByRegenerationIdComparison = <ThrowOnError extends boolean = false>(options: Options<GetAdminExplanationRegenerateByRegenerationIdComparisonData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminExplanationRegenerateByRegenerationIdComparisonResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/regenerate/{regenerationId}/comparison',
        ...options
    });
};

export const postAdminExplanationRegenerateByRegenerationIdChoose = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationRegenerateByRegenerationIdChooseData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationRegenerateByRegenerationIdChooseResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/regenerate/{regenerationId}/choose',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAdminExplanationsBulk = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminExplanationsBulkData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminExplanationsBulkResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminExplanationsSetActiveAsDefault = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationsSetActiveAsDefaultData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationsSetActiveAsDefaultResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/set-active-as-default',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminExplanationsSetDefaultsActive = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationsSetDefaultsActiveData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationsSetDefaultsActiveResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/set-defaults-active',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminExplanationsSetSpecificVersionActive = <ThrowOnError extends boolean = false>(options: Options<PostAdminExplanationsSetSpecificVersionActiveData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminExplanationsSetSpecificVersionActiveResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/set-specific-version-active',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAdminExplanationsInactive = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminExplanationsInactiveData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminExplanationsInactiveResponses, unknown, ThrowOnError>({
        url: '/admin/explanations/inactive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminExplanationByIdHistory = <ThrowOnError extends boolean = false>(options: Options<GetAdminExplanationByIdHistoryData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminExplanationByIdHistoryResponses, unknown, ThrowOnError>({
        url: '/admin/explanation/{id}/history',
        ...options
    });
};

export const getAdminExplanations = <ThrowOnError extends boolean = false>(options: Options<GetAdminExplanationsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminExplanationsResponses, unknown, ThrowOnError>({
        url: '/admin/explanations',
        ...options
    });
};

export const getAdminStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdminStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminStatsResponses, unknown, ThrowOnError>({
        url: '/admin/stats',
        ...options
    });
};

export const getAdminPromptsSystem = <ThrowOnError extends boolean = false>(options?: Options<GetAdminPromptsSystemData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminPromptsSystemResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/system',
        ...options
    });
};

export const postAdminPromptsSystem = <ThrowOnError extends boolean = false>(options: Options<PostAdminPromptsSystemData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminPromptsSystemResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/system',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminPromptsUser = <ThrowOnError extends boolean = false>(options?: Options<GetAdminPromptsUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminPromptsUserResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/user',
        ...options
    });
};

export const postAdminPromptsUser = <ThrowOnError extends boolean = false>(options: Options<PostAdminPromptsUserData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminPromptsUserResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminPromptsExplanationTypes = <ThrowOnError extends boolean = false>(options?: Options<GetAdminPromptsExplanationTypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminPromptsExplanationTypesResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/explanation-types',
        ...options
    });
};

export const deleteAdminPromptsSystemById = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminPromptsSystemByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminPromptsSystemByIdResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/system/{id}',
        ...options
    });
};

export const putAdminPromptsSystemById = <ThrowOnError extends boolean = false>(options: Options<PutAdminPromptsSystemByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAdminPromptsSystemByIdResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/system/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAdminPromptsUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminPromptsUserByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminPromptsUserByIdResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/user/{id}',
        ...options
    });
};

export const putAdminPromptsUserById = <ThrowOnError extends boolean = false>(options: Options<PutAdminPromptsUserByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAdminPromptsUserByIdResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putAdminPromptsSystemByIdStatus = <ThrowOnError extends boolean = false>(options: Options<PutAdminPromptsSystemByIdStatusData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAdminPromptsSystemByIdStatusResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/system/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putAdminPromptsUserByIdStatus = <ThrowOnError extends boolean = false>(options: Options<PutAdminPromptsUserByIdStatusData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAdminPromptsUserByIdStatusResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/user/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postAdminPromptsRestoreDefaults = <ThrowOnError extends boolean = false>(options?: Options<PostAdminPromptsRestoreDefaultsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAdminPromptsRestoreDefaultsResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/restore-defaults',
        ...options
    });
};

export const postAdminPromptsPlayground = <ThrowOnError extends boolean = false>(options: Options<PostAdminPromptsPlaygroundData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminPromptsPlaygroundResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/playground',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAdminPromptsExplanationExisting = <ThrowOnError extends boolean = false>(options: Options<GetAdminPromptsExplanationExistingData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAdminPromptsExplanationExistingResponses, unknown, ThrowOnError>({
        url: '/admin/prompts/explanation/existing',
        ...options
    });
};

export const getAdminCommentaryGrades = <ThrowOnError extends boolean = false>(options?: Options<GetAdminCommentaryGradesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAdminCommentaryGradesResponses, unknown, ThrowOnError>({
        url: '/admin/commentary/grades',
        ...options
    });
};

export const postAdminCommentaryGrade = <ThrowOnError extends boolean = false>(options: Options<PostAdminCommentaryGradeData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAdminCommentaryGradeResponses, unknown, ThrowOnError>({
        url: '/admin/commentary/grade',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
