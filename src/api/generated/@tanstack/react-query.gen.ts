// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { deleteAdminBatchByBatchJobId, deleteAdminExplanationById, deleteAdminExplanationsBulk, deleteAdminExplanationsInactive, deleteAdminPromptsSystemById, deleteAdminPromptsUserById, deleteAdminTopicsById, deleteBibleBookBookmarkRemove, deleteBibleBookDeleteChatByConversationId, deleteBibleBookNoteRemove, deleteBibleHighlightByHighlightId, getAdminBatchByBatchJobId, getAdminBatchChildrenByParentId, getAdminBatchHistory, getAdminBatchSummaryByParentId, getAdminCommentaryGrades, getAdminExplanationByIdHistory, getAdminExplanationRegenerateByRegenerationIdComparison, getAdminExplanations, getAdminExplanationsLanguages, getAdminPromptsExplanationExisting, getAdminPromptsExplanationTypes, getAdminPromptsSystem, getAdminPromptsUser, getAdminStats, getAdminTopics, getAdminUsers, getAuthResetPasswordVerify, getAuthSession, getAuthUser, getBibleBookBookmarksByUserId, getBibleBookByBookIdByChapterNumber, getBibleBookExplanationByBookIdByChapterNumber, getBibleBookNotesByUserId, getBibleBooks, getBibleChapterIdByBookIdByChapterNumber, getBibleHighlightsByUserId, getBibleHighlightsByUserIdByBookIdByChapterNumber, getBibleLanguages, getBibleTestaments, getTopicsById, getTopicsByIdExplanation, getTopicsByIdReferences, getTopicsCategories, getTopicsSearch, getUser, getUserMe, type Options, patchAdminUserByIdAdminStatus, patchUserPreferences, postAdminBatchesMonitorAll, postAdminBatchExplanations, postAdminBatchRephrase, postAdminBatchTopicDiscovery, postAdminBatchTopicExplanations, postAdminBatchTopicReferences, postAdminBatchTranslate, postAdminCommentaryGrade, postAdminExplanationRegenerate, postAdminExplanationRegenerateByRegenerationIdChoose, postAdminExplanationRegenerateByRegenerationIdGenerate, postAdminExplanationsRefreshLanguageStats, postAdminExplanationsSetActiveAsDefault, postAdminExplanationsSetDefaultsActive, postAdminExplanationsSetSpecificVersionActive, postAdminMonitorBibleBatchByParentId, postAdminPromptsPlayground, postAdminPromptsRestoreDefaults, postAdminPromptsSystem, postAdminPromptsUser, postAdminTopics, postAdminTopicsSortChronologically, postAuthChangePassword, postAuthForgotPassword, postAuthLogin, postAuthLogout, postAuthLogoutAll, postAuthResetPassword, postAuthSendEmailVerification, postAuthSignup, postAuthVerifyEmail, postBibleBookAskVerseMateSaveAiMessage, postBibleBookAskVerseMateSaveUserMessage, postBibleBookBookmarkAdd, postBibleBookBookmarkRemove, postBibleBookChapterLastRead, postBibleBookChapterSaveLastRead, postBibleBookConversationExists, postBibleBookConversationsHistory, postBibleBookExplanationRatings, postBibleBookExplanationSaveRating, postBibleBookMessagesHistory, postBibleBookNewConversation, postBibleBookNoteAdd, postBibleHighlightAdd, postTopicsParseReferences, postUserUpdate, putAdminPromptsSystemById, putAdminPromptsSystemByIdStatus, putAdminPromptsUserById, putAdminPromptsUserByIdStatus, putAdminTopicsById, putAuthProfile, putBibleBookExplanationUpdateRating, putBibleBookNoteUpdate, putBibleHighlightByHighlightId } from '../sdk.gen';
import type { DeleteAdminBatchByBatchJobIdData, DeleteAdminBatchByBatchJobIdError, DeleteAdminBatchByBatchJobIdResponse, DeleteAdminExplanationByIdData, DeleteAdminExplanationByIdError, DeleteAdminExplanationsBulkData, DeleteAdminExplanationsBulkError, DeleteAdminExplanationsInactiveData, DeleteAdminExplanationsInactiveError, DeleteAdminPromptsSystemByIdData, DeleteAdminPromptsSystemByIdError, DeleteAdminPromptsUserByIdData, DeleteAdminPromptsUserByIdError, DeleteAdminTopicsByIdData, DeleteBibleBookBookmarkRemoveData, DeleteBibleBookBookmarkRemoveError, DeleteBibleBookBookmarkRemoveResponse, DeleteBibleBookDeleteChatByConversationIdData, DeleteBibleBookDeleteChatByConversationIdError, DeleteBibleBookDeleteChatByConversationIdResponse, DeleteBibleBookNoteRemoveData, DeleteBibleBookNoteRemoveError, DeleteBibleBookNoteRemoveResponse, DeleteBibleHighlightByHighlightIdData, DeleteBibleHighlightByHighlightIdError, DeleteBibleHighlightByHighlightIdResponse, GetAdminBatchByBatchJobIdData, GetAdminBatchChildrenByParentIdData, GetAdminBatchHistoryData, GetAdminBatchHistoryError, GetAdminBatchSummaryByParentIdData, GetAdminCommentaryGradesData, GetAdminExplanationByIdHistoryData, GetAdminExplanationRegenerateByRegenerationIdComparisonData, GetAdminExplanationsData, GetAdminExplanationsError, GetAdminExplanationsLanguagesData, GetAdminPromptsExplanationExistingData, GetAdminPromptsExplanationTypesData, GetAdminPromptsSystemData, GetAdminPromptsUserData, GetAdminStatsData, GetAdminTopicsData, GetAdminUsersData, GetAuthResetPasswordVerifyData, GetAuthSessionData, GetAuthUserData, GetBibleBookBookmarksByUserIdData, GetBibleBookByBookIdByChapterNumberData, GetBibleBookExplanationByBookIdByChapterNumberData, GetBibleBookNotesByUserIdData, GetBibleBooksData, GetBibleChapterIdByBookIdByChapterNumberData, GetBibleHighlightsByUserIdByBookIdByChapterNumberData, GetBibleHighlightsByUserIdData, GetBibleLanguagesData, GetBibleTestamentsData, GetTopicsByIdData, GetTopicsByIdExplanationData, GetTopicsByIdReferencesData, GetTopicsCategoriesData, GetTopicsSearchData, GetUserData, GetUserMeData, PatchAdminUserByIdAdminStatusData, PatchAdminUserByIdAdminStatusError, PatchAdminUserByIdAdminStatusResponse, PatchUserPreferencesData, PatchUserPreferencesError, PatchUserPreferencesResponse, PostAdminBatchesMonitorAllData, PostAdminBatchesMonitorAllError, PostAdminBatchExplanationsData, PostAdminBatchExplanationsError, PostAdminBatchRephraseData, PostAdminBatchRephraseError, PostAdminBatchTopicDiscoveryData, PostAdminBatchTopicExplanationsData, PostAdminBatchTopicReferencesData, PostAdminBatchTranslateData, PostAdminBatchTranslateError, PostAdminCommentaryGradeData, PostAdminCommentaryGradeError, PostAdminCommentaryGradeResponse, PostAdminExplanationRegenerateByRegenerationIdChooseData, PostAdminExplanationRegenerateByRegenerationIdChooseError, PostAdminExplanationRegenerateByRegenerationIdGenerateData, PostAdminExplanationRegenerateByRegenerationIdGenerateError, PostAdminExplanationRegenerateData, PostAdminExplanationRegenerateError, PostAdminExplanationsRefreshLanguageStatsData, PostAdminExplanationsRefreshLanguageStatsError, PostAdminExplanationsSetActiveAsDefaultData, PostAdminExplanationsSetActiveAsDefaultError, PostAdminExplanationsSetDefaultsActiveData, PostAdminExplanationsSetDefaultsActiveError, PostAdminExplanationsSetSpecificVersionActiveData, PostAdminExplanationsSetSpecificVersionActiveError, PostAdminMonitorBibleBatchByParentIdData, PostAdminMonitorBibleBatchByParentIdError, PostAdminPromptsPlaygroundData, PostAdminPromptsPlaygroundError, PostAdminPromptsRestoreDefaultsData, PostAdminPromptsRestoreDefaultsError, PostAdminPromptsSystemData, PostAdminPromptsSystemError, PostAdminPromptsUserData, PostAdminPromptsUserError, PostAdminTopicsData, PostAdminTopicsSortChronologicallyData, PostAuthChangePasswordData, PostAuthChangePasswordError, PostAuthChangePasswordResponse, PostAuthForgotPasswordData, PostAuthForgotPasswordError, PostAuthForgotPasswordResponse, PostAuthLoginData, PostAuthLoginError, PostAuthLoginResponse, PostAuthLogoutAllData, PostAuthLogoutAllError, PostAuthLogoutAllResponse, PostAuthLogoutData, PostAuthLogoutError, PostAuthLogoutResponse, PostAuthResetPasswordData, PostAuthResetPasswordError, PostAuthResetPasswordResponse, PostAuthSendEmailVerificationData, PostAuthSendEmailVerificationError, PostAuthSignupData, PostAuthSignupError, PostAuthSignupResponse, PostAuthVerifyEmailData, PostAuthVerifyEmailError, PostAuthVerifyEmailResponse, PostBibleBookAskVerseMateSaveAiMessageData, PostBibleBookAskVerseMateSaveAiMessageError, PostBibleBookAskVerseMateSaveAiMessageResponse, PostBibleBookAskVerseMateSaveUserMessageData, PostBibleBookAskVerseMateSaveUserMessageError, PostBibleBookAskVerseMateSaveUserMessageResponse, PostBibleBookBookmarkAddData, PostBibleBookBookmarkAddError, PostBibleBookBookmarkAddResponse, PostBibleBookBookmarkRemoveData, PostBibleBookBookmarkRemoveError, PostBibleBookBookmarkRemoveResponse, PostBibleBookChapterLastReadData, PostBibleBookChapterLastReadError, PostBibleBookChapterLastReadResponse, PostBibleBookChapterSaveLastReadData, PostBibleBookChapterSaveLastReadError, PostBibleBookChapterSaveLastReadResponse, PostBibleBookConversationExistsData, PostBibleBookConversationExistsError, PostBibleBookConversationExistsResponse, PostBibleBookConversationsHistoryData, PostBibleBookConversationsHistoryError, PostBibleBookConversationsHistoryResponse, PostBibleBookExplanationRatingsData, PostBibleBookExplanationRatingsError, PostBibleBookExplanationRatingsResponse, PostBibleBookExplanationSaveRatingData, PostBibleBookExplanationSaveRatingError, PostBibleBookExplanationSaveRatingResponse, PostBibleBookMessagesHistoryData, PostBibleBookMessagesHistoryError, PostBibleBookMessagesHistoryResponse, PostBibleBookNewConversationData, PostBibleBookNewConversationError, PostBibleBookNewConversationResponse, PostBibleBookNoteAddData, PostBibleBookNoteAddError, PostBibleBookNoteAddResponse, PostBibleHighlightAddData, PostBibleHighlightAddError, PostBibleHighlightAddResponse, PostTopicsParseReferencesData, PostTopicsParseReferencesResponse, PostUserUpdateData, PostUserUpdateError, PostUserUpdateResponse, PutAdminPromptsSystemByIdData, PutAdminPromptsSystemByIdError, PutAdminPromptsSystemByIdStatusData, PutAdminPromptsSystemByIdStatusError, PutAdminPromptsUserByIdData, PutAdminPromptsUserByIdError, PutAdminPromptsUserByIdStatusData, PutAdminPromptsUserByIdStatusError, PutAdminTopicsByIdData, PutAuthProfileData, PutAuthProfileError, PutAuthProfileResponse, PutBibleBookExplanationUpdateRatingData, PutBibleBookExplanationUpdateRatingError, PutBibleBookExplanationUpdateRatingResponse, PutBibleBookNoteUpdateData, PutBibleBookNoteUpdateError, PutBibleBookNoteUpdateResponse, PutBibleHighlightByHighlightIdData, PutBibleHighlightByHighlightIdError, PutBibleHighlightByHighlightIdResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: readonly string[];
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: readonly string[]): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAuthUserQueryKey = (options?: Options<GetAuthUserData>) => createQueryKey('getAuthUser', options);

export const getAuthUserOptions = (options?: Options<GetAuthUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthUserQueryKey(options)
    });
};

export const postAuthChangePasswordMutation = (options?: Partial<Options<PostAuthChangePasswordData>>): UseMutationOptions<PostAuthChangePasswordResponse, PostAuthChangePasswordError, Options<PostAuthChangePasswordData>> => {
    const mutationOptions: UseMutationOptions<PostAuthChangePasswordResponse, PostAuthChangePasswordError, Options<PostAuthChangePasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthChangePassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLogoutMutation = (options?: Partial<Options<PostAuthLogoutData>>): UseMutationOptions<PostAuthLogoutResponse, PostAuthLogoutError, Options<PostAuthLogoutData>> => {
    const mutationOptions: UseMutationOptions<PostAuthLogoutResponse, PostAuthLogoutError, Options<PostAuthLogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthLogout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLogoutAllMutation = (options?: Partial<Options<PostAuthLogoutAllData>>): UseMutationOptions<PostAuthLogoutAllResponse, PostAuthLogoutAllError, Options<PostAuthLogoutAllData>> => {
    const mutationOptions: UseMutationOptions<PostAuthLogoutAllResponse, PostAuthLogoutAllError, Options<PostAuthLogoutAllData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthLogoutAll({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthSendEmailVerificationMutation = (options?: Partial<Options<PostAuthSendEmailVerificationData>>): UseMutationOptions<unknown, PostAuthSendEmailVerificationError, Options<PostAuthSendEmailVerificationData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAuthSendEmailVerificationError, Options<PostAuthSendEmailVerificationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthSendEmailVerification({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthVerifyEmailMutation = (options?: Partial<Options<PostAuthVerifyEmailData>>): UseMutationOptions<PostAuthVerifyEmailResponse, PostAuthVerifyEmailError, Options<PostAuthVerifyEmailData>> => {
    const mutationOptions: UseMutationOptions<PostAuthVerifyEmailResponse, PostAuthVerifyEmailError, Options<PostAuthVerifyEmailData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthVerifyEmail({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAuthSessionQueryKey = (options?: Options<GetAuthSessionData>) => createQueryKey('getAuthSession', options);

export const getAuthSessionOptions = (options?: Options<GetAuthSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthSessionQueryKey(options)
    });
};

export const putAuthProfileMutation = (options?: Partial<Options<PutAuthProfileData>>): UseMutationOptions<PutAuthProfileResponse, PutAuthProfileError, Options<PutAuthProfileData>> => {
    const mutationOptions: UseMutationOptions<PutAuthProfileResponse, PutAuthProfileError, Options<PutAuthProfileData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAuthProfile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthSignupMutation = (options?: Partial<Options<PostAuthSignupData>>): UseMutationOptions<PostAuthSignupResponse, PostAuthSignupError, Options<PostAuthSignupData>> => {
    const mutationOptions: UseMutationOptions<PostAuthSignupResponse, PostAuthSignupError, Options<PostAuthSignupData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthSignup({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLoginMutation = (options?: Partial<Options<PostAuthLoginData>>): UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, Options<PostAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, Options<PostAuthLoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthLogin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthForgotPasswordMutation = (options?: Partial<Options<PostAuthForgotPasswordData>>): UseMutationOptions<PostAuthForgotPasswordResponse, PostAuthForgotPasswordError, Options<PostAuthForgotPasswordData>> => {
    const mutationOptions: UseMutationOptions<PostAuthForgotPasswordResponse, PostAuthForgotPasswordError, Options<PostAuthForgotPasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthForgotPassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthResetPasswordMutation = (options?: Partial<Options<PostAuthResetPasswordData>>): UseMutationOptions<PostAuthResetPasswordResponse, PostAuthResetPasswordError, Options<PostAuthResetPasswordData>> => {
    const mutationOptions: UseMutationOptions<PostAuthResetPasswordResponse, PostAuthResetPasswordError, Options<PostAuthResetPasswordData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAuthResetPassword({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAuthResetPasswordVerifyQueryKey = (options: Options<GetAuthResetPasswordVerifyData>) => createQueryKey('getAuthResetPasswordVerify', options);

export const getAuthResetPasswordVerifyOptions = (options: Options<GetAuthResetPasswordVerifyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthResetPasswordVerify({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthResetPasswordVerifyQueryKey(options)
    });
};

export const getUserQueryKey = (options?: Options<GetUserData>) => createQueryKey('getUser', options);

/**
 * Get all users
 * Retrieve a list of all registered users
 */
export const getUserOptions = (options?: Options<GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserQueryKey(options)
    });
};

export const getUserMeQueryKey = (options?: Options<GetUserMeData>) => createQueryKey('getUserMe', options);

export const getUserMeOptions = (options?: Options<GetUserMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserMeQueryKey(options)
    });
};

/**
 * Update current user
 * Update the authenticated user's profile information
 */
export const postUserUpdateMutation = (options?: Partial<Options<PostUserUpdateData>>): UseMutationOptions<PostUserUpdateResponse, PostUserUpdateError, Options<PostUserUpdateData>> => {
    const mutationOptions: UseMutationOptions<PostUserUpdateResponse, PostUserUpdateError, Options<PostUserUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postUserUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBibleBooksQueryKey = (options?: Options<GetBibleBooksData>) => createQueryKey('getBibleBooks', options);

export const getBibleBooksOptions = (options?: Options<GetBibleBooksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleBooks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleBooksQueryKey(options)
    });
};

export const getBibleLanguagesQueryKey = (options?: Options<GetBibleLanguagesData>) => createQueryKey('getBibleLanguages', options);

export const getBibleLanguagesOptions = (options?: Options<GetBibleLanguagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleLanguages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleLanguagesQueryKey(options)
    });
};

export const getBibleBookByBookIdByChapterNumberQueryKey = (options: Options<GetBibleBookByBookIdByChapterNumberData>) => createQueryKey('getBibleBookByBookIdByChapterNumber', options);

export const getBibleBookByBookIdByChapterNumberOptions = (options: Options<GetBibleBookByBookIdByChapterNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleBookByBookIdByChapterNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleBookByBookIdByChapterNumberQueryKey(options)
    });
};

export const getBibleBookExplanationByBookIdByChapterNumberQueryKey = (options: Options<GetBibleBookExplanationByBookIdByChapterNumberData>) => createQueryKey('getBibleBookExplanationByBookIdByChapterNumber', options);

export const getBibleBookExplanationByBookIdByChapterNumberOptions = (options: Options<GetBibleBookExplanationByBookIdByChapterNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleBookExplanationByBookIdByChapterNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleBookExplanationByBookIdByChapterNumberQueryKey(options)
    });
};

export const getBibleTestamentsQueryKey = (options?: Options<GetBibleTestamentsData>) => createQueryKey('getBibleTestaments', options);

export const getBibleTestamentsOptions = (options?: Options<GetBibleTestamentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleTestaments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleTestamentsQueryKey(options)
    });
};

export const getBibleChapterIdByBookIdByChapterNumberQueryKey = (options: Options<GetBibleChapterIdByBookIdByChapterNumberData>) => createQueryKey('getBibleChapterIdByBookIdByChapterNumber', options);

export const getBibleChapterIdByBookIdByChapterNumberOptions = (options: Options<GetBibleChapterIdByBookIdByChapterNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleChapterIdByBookIdByChapterNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleChapterIdByBookIdByChapterNumberQueryKey(options)
    });
};

export const postBibleBookConversationsHistoryMutation = (options?: Partial<Options<PostBibleBookConversationsHistoryData>>): UseMutationOptions<PostBibleBookConversationsHistoryResponse, PostBibleBookConversationsHistoryError, Options<PostBibleBookConversationsHistoryData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookConversationsHistoryResponse, PostBibleBookConversationsHistoryError, Options<PostBibleBookConversationsHistoryData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookConversationsHistory({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookMessagesHistoryMutation = (options?: Partial<Options<PostBibleBookMessagesHistoryData>>): UseMutationOptions<PostBibleBookMessagesHistoryResponse, PostBibleBookMessagesHistoryError, Options<PostBibleBookMessagesHistoryData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookMessagesHistoryResponse, PostBibleBookMessagesHistoryError, Options<PostBibleBookMessagesHistoryData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookMessagesHistory({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookConversationExistsMutation = (options?: Partial<Options<PostBibleBookConversationExistsData>>): UseMutationOptions<PostBibleBookConversationExistsResponse, PostBibleBookConversationExistsError, Options<PostBibleBookConversationExistsData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookConversationExistsResponse, PostBibleBookConversationExistsError, Options<PostBibleBookConversationExistsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookConversationExists({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookNewConversationMutation = (options?: Partial<Options<PostBibleBookNewConversationData>>): UseMutationOptions<PostBibleBookNewConversationResponse, PostBibleBookNewConversationError, Options<PostBibleBookNewConversationData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookNewConversationResponse, PostBibleBookNewConversationError, Options<PostBibleBookNewConversationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookNewConversation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookExplanationSaveRatingMutation = (options?: Partial<Options<PostBibleBookExplanationSaveRatingData>>): UseMutationOptions<PostBibleBookExplanationSaveRatingResponse, PostBibleBookExplanationSaveRatingError, Options<PostBibleBookExplanationSaveRatingData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookExplanationSaveRatingResponse, PostBibleBookExplanationSaveRatingError, Options<PostBibleBookExplanationSaveRatingData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookExplanationSaveRating({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBibleBookExplanationUpdateRatingMutation = (options?: Partial<Options<PutBibleBookExplanationUpdateRatingData>>): UseMutationOptions<PutBibleBookExplanationUpdateRatingResponse, PutBibleBookExplanationUpdateRatingError, Options<PutBibleBookExplanationUpdateRatingData>> => {
    const mutationOptions: UseMutationOptions<PutBibleBookExplanationUpdateRatingResponse, PutBibleBookExplanationUpdateRatingError, Options<PutBibleBookExplanationUpdateRatingData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putBibleBookExplanationUpdateRating({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookExplanationRatingsMutation = (options?: Partial<Options<PostBibleBookExplanationRatingsData>>): UseMutationOptions<PostBibleBookExplanationRatingsResponse, PostBibleBookExplanationRatingsError, Options<PostBibleBookExplanationRatingsData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookExplanationRatingsResponse, PostBibleBookExplanationRatingsError, Options<PostBibleBookExplanationRatingsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookExplanationRatings({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookChapterSaveLastReadMutation = (options?: Partial<Options<PostBibleBookChapterSaveLastReadData>>): UseMutationOptions<PostBibleBookChapterSaveLastReadResponse, PostBibleBookChapterSaveLastReadError, Options<PostBibleBookChapterSaveLastReadData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookChapterSaveLastReadResponse, PostBibleBookChapterSaveLastReadError, Options<PostBibleBookChapterSaveLastReadData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookChapterSaveLastRead({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookChapterLastReadMutation = (options?: Partial<Options<PostBibleBookChapterLastReadData>>): UseMutationOptions<PostBibleBookChapterLastReadResponse, PostBibleBookChapterLastReadError, Options<PostBibleBookChapterLastReadData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookChapterLastReadResponse, PostBibleBookChapterLastReadError, Options<PostBibleBookChapterLastReadData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookChapterLastRead({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookAskVerseMateSaveUserMessageMutation = (options?: Partial<Options<PostBibleBookAskVerseMateSaveUserMessageData>>): UseMutationOptions<PostBibleBookAskVerseMateSaveUserMessageResponse, PostBibleBookAskVerseMateSaveUserMessageError, Options<PostBibleBookAskVerseMateSaveUserMessageData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookAskVerseMateSaveUserMessageResponse, PostBibleBookAskVerseMateSaveUserMessageError, Options<PostBibleBookAskVerseMateSaveUserMessageData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookAskVerseMateSaveUserMessage({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookAskVerseMateSaveAiMessageMutation = (options?: Partial<Options<PostBibleBookAskVerseMateSaveAiMessageData>>): UseMutationOptions<PostBibleBookAskVerseMateSaveAiMessageResponse, PostBibleBookAskVerseMateSaveAiMessageError, Options<PostBibleBookAskVerseMateSaveAiMessageData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookAskVerseMateSaveAiMessageResponse, PostBibleBookAskVerseMateSaveAiMessageError, Options<PostBibleBookAskVerseMateSaveAiMessageData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookAskVerseMateSaveAiMessage({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBibleBookDeleteChatByConversationIdMutation = (options?: Partial<Options<DeleteBibleBookDeleteChatByConversationIdData>>): UseMutationOptions<DeleteBibleBookDeleteChatByConversationIdResponse, DeleteBibleBookDeleteChatByConversationIdError, Options<DeleteBibleBookDeleteChatByConversationIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteBibleBookDeleteChatByConversationIdResponse, DeleteBibleBookDeleteChatByConversationIdError, Options<DeleteBibleBookDeleteChatByConversationIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteBibleBookDeleteChatByConversationId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBibleBookBookmarksByUserIdQueryKey = (options: Options<GetBibleBookBookmarksByUserIdData>) => createQueryKey('getBibleBookBookmarksByUserId', options);

export const getBibleBookBookmarksByUserIdOptions = (options: Options<GetBibleBookBookmarksByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleBookBookmarksByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleBookBookmarksByUserIdQueryKey(options)
    });
};

export const getBibleBookNotesByUserIdQueryKey = (options: Options<GetBibleBookNotesByUserIdData>) => createQueryKey('getBibleBookNotesByUserId', options);

export const getBibleBookNotesByUserIdOptions = (options: Options<GetBibleBookNotesByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleBookNotesByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleBookNotesByUserIdQueryKey(options)
    });
};

export const postBibleBookNoteAddMutation = (options?: Partial<Options<PostBibleBookNoteAddData>>): UseMutationOptions<PostBibleBookNoteAddResponse, PostBibleBookNoteAddError, Options<PostBibleBookNoteAddData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookNoteAddResponse, PostBibleBookNoteAddError, Options<PostBibleBookNoteAddData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookNoteAdd({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBibleBookNoteUpdateMutation = (options?: Partial<Options<PutBibleBookNoteUpdateData>>): UseMutationOptions<PutBibleBookNoteUpdateResponse, PutBibleBookNoteUpdateError, Options<PutBibleBookNoteUpdateData>> => {
    const mutationOptions: UseMutationOptions<PutBibleBookNoteUpdateResponse, PutBibleBookNoteUpdateError, Options<PutBibleBookNoteUpdateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putBibleBookNoteUpdate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBibleBookNoteRemoveMutation = (options?: Partial<Options<DeleteBibleBookNoteRemoveData>>): UseMutationOptions<DeleteBibleBookNoteRemoveResponse, DeleteBibleBookNoteRemoveError, Options<DeleteBibleBookNoteRemoveData>> => {
    const mutationOptions: UseMutationOptions<DeleteBibleBookNoteRemoveResponse, DeleteBibleBookNoteRemoveError, Options<DeleteBibleBookNoteRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteBibleBookNoteRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookBookmarkAddMutation = (options?: Partial<Options<PostBibleBookBookmarkAddData>>): UseMutationOptions<PostBibleBookBookmarkAddResponse, PostBibleBookBookmarkAddError, Options<PostBibleBookBookmarkAddData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookBookmarkAddResponse, PostBibleBookBookmarkAddError, Options<PostBibleBookBookmarkAddData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookBookmarkAdd({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBibleBookBookmarkRemoveMutation = (options?: Partial<Options<DeleteBibleBookBookmarkRemoveData>>): UseMutationOptions<DeleteBibleBookBookmarkRemoveResponse, DeleteBibleBookBookmarkRemoveError, Options<DeleteBibleBookBookmarkRemoveData>> => {
    const mutationOptions: UseMutationOptions<DeleteBibleBookBookmarkRemoveResponse, DeleteBibleBookBookmarkRemoveError, Options<DeleteBibleBookBookmarkRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteBibleBookBookmarkRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postBibleBookBookmarkRemoveMutation = (options?: Partial<Options<PostBibleBookBookmarkRemoveData>>): UseMutationOptions<PostBibleBookBookmarkRemoveResponse, PostBibleBookBookmarkRemoveError, Options<PostBibleBookBookmarkRemoveData>> => {
    const mutationOptions: UseMutationOptions<PostBibleBookBookmarkRemoveResponse, PostBibleBookBookmarkRemoveError, Options<PostBibleBookBookmarkRemoveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleBookBookmarkRemove({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBibleHighlightsByUserIdQueryKey = (options: Options<GetBibleHighlightsByUserIdData>) => createQueryKey('getBibleHighlightsByUserId', options);

export const getBibleHighlightsByUserIdOptions = (options: Options<GetBibleHighlightsByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleHighlightsByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleHighlightsByUserIdQueryKey(options)
    });
};

export const getBibleHighlightsByUserIdByBookIdByChapterNumberQueryKey = (options: Options<GetBibleHighlightsByUserIdByBookIdByChapterNumberData>) => createQueryKey('getBibleHighlightsByUserIdByBookIdByChapterNumber', options);

export const getBibleHighlightsByUserIdByBookIdByChapterNumberOptions = (options: Options<GetBibleHighlightsByUserIdByBookIdByChapterNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBibleHighlightsByUserIdByBookIdByChapterNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBibleHighlightsByUserIdByBookIdByChapterNumberQueryKey(options)
    });
};

export const postBibleHighlightAddMutation = (options?: Partial<Options<PostBibleHighlightAddData>>): UseMutationOptions<PostBibleHighlightAddResponse, PostBibleHighlightAddError, Options<PostBibleHighlightAddData>> => {
    const mutationOptions: UseMutationOptions<PostBibleHighlightAddResponse, PostBibleHighlightAddError, Options<PostBibleHighlightAddData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postBibleHighlightAdd({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBibleHighlightByHighlightIdMutation = (options?: Partial<Options<DeleteBibleHighlightByHighlightIdData>>): UseMutationOptions<DeleteBibleHighlightByHighlightIdResponse, DeleteBibleHighlightByHighlightIdError, Options<DeleteBibleHighlightByHighlightIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteBibleHighlightByHighlightIdResponse, DeleteBibleHighlightByHighlightIdError, Options<DeleteBibleHighlightByHighlightIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteBibleHighlightByHighlightId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBibleHighlightByHighlightIdMutation = (options?: Partial<Options<PutBibleHighlightByHighlightIdData>>): UseMutationOptions<PutBibleHighlightByHighlightIdResponse, PutBibleHighlightByHighlightIdError, Options<PutBibleHighlightByHighlightIdData>> => {
    const mutationOptions: UseMutationOptions<PutBibleHighlightByHighlightIdResponse, PutBibleHighlightByHighlightIdError, Options<PutBibleHighlightByHighlightIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putBibleHighlightByHighlightId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTopicsCategoriesQueryKey = (options?: Options<GetTopicsCategoriesData>) => createQueryKey('getTopicsCategories', options);

export const getTopicsCategoriesOptions = (options?: Options<GetTopicsCategoriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopicsCategories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopicsCategoriesQueryKey(options)
    });
};

export const getTopicsSearchQueryKey = (options: Options<GetTopicsSearchData>) => createQueryKey('getTopicsSearch', options);

export const getTopicsSearchOptions = (options: Options<GetTopicsSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopicsSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopicsSearchQueryKey(options)
    });
};

export const getTopicsByIdQueryKey = (options: Options<GetTopicsByIdData>) => createQueryKey('getTopicsById', options);

export const getTopicsByIdOptions = (options: Options<GetTopicsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopicsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopicsByIdQueryKey(options)
    });
};

export const getTopicsByIdReferencesQueryKey = (options: Options<GetTopicsByIdReferencesData>) => createQueryKey('getTopicsByIdReferences', options);

export const getTopicsByIdReferencesOptions = (options: Options<GetTopicsByIdReferencesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopicsByIdReferences({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopicsByIdReferencesQueryKey(options)
    });
};

export const getTopicsByIdExplanationQueryKey = (options: Options<GetTopicsByIdExplanationData>) => createQueryKey('getTopicsByIdExplanation', options);

export const getTopicsByIdExplanationOptions = (options: Options<GetTopicsByIdExplanationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTopicsByIdExplanation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTopicsByIdExplanationQueryKey(options)
    });
};

export const postTopicsParseReferencesMutation = (options?: Partial<Options<PostTopicsParseReferencesData>>): UseMutationOptions<PostTopicsParseReferencesResponse, DefaultError, Options<PostTopicsParseReferencesData>> => {
    const mutationOptions: UseMutationOptions<PostTopicsParseReferencesResponse, DefaultError, Options<PostTopicsParseReferencesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postTopicsParseReferences({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchUserPreferencesMutation = (options?: Partial<Options<PatchUserPreferencesData>>): UseMutationOptions<PatchUserPreferencesResponse, PatchUserPreferencesError, Options<PatchUserPreferencesData>> => {
    const mutationOptions: UseMutationOptions<PatchUserPreferencesResponse, PatchUserPreferencesError, Options<PatchUserPreferencesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchUserPreferences({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminExplanationsLanguagesQueryKey = (options?: Options<GetAdminExplanationsLanguagesData>) => createQueryKey('getAdminExplanationsLanguages', options);

export const getAdminExplanationsLanguagesOptions = (options?: Options<GetAdminExplanationsLanguagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminExplanationsLanguages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminExplanationsLanguagesQueryKey(options)
    });
};

export const postAdminExplanationsRefreshLanguageStatsMutation = (options?: Partial<Options<PostAdminExplanationsRefreshLanguageStatsData>>): UseMutationOptions<unknown, PostAdminExplanationsRefreshLanguageStatsError, Options<PostAdminExplanationsRefreshLanguageStatsData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationsRefreshLanguageStatsError, Options<PostAdminExplanationsRefreshLanguageStatsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationsRefreshLanguageStats({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminUsersQueryKey = (options?: Options<GetAdminUsersData>) => createQueryKey('getAdminUsers', options);

export const getAdminUsersOptions = (options?: Options<GetAdminUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminUsersQueryKey(options)
    });
};

export const patchAdminUserByIdAdminStatusMutation = (options?: Partial<Options<PatchAdminUserByIdAdminStatusData>>): UseMutationOptions<PatchAdminUserByIdAdminStatusResponse, PatchAdminUserByIdAdminStatusError, Options<PatchAdminUserByIdAdminStatusData>> => {
    const mutationOptions: UseMutationOptions<PatchAdminUserByIdAdminStatusResponse, PatchAdminUserByIdAdminStatusError, Options<PatchAdminUserByIdAdminStatusData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchAdminUserByIdAdminStatus({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchExplanationsMutation = (options?: Partial<Options<PostAdminBatchExplanationsData>>): UseMutationOptions<unknown, PostAdminBatchExplanationsError, Options<PostAdminBatchExplanationsData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminBatchExplanationsError, Options<PostAdminBatchExplanationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchExplanations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchTopicReferencesMutation = (options?: Partial<Options<PostAdminBatchTopicReferencesData>>): UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicReferencesData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicReferencesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchTopicReferences({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchTopicDiscoveryMutation = (options?: Partial<Options<PostAdminBatchTopicDiscoveryData>>): UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicDiscoveryData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicDiscoveryData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchTopicDiscovery({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchRephraseMutation = (options?: Partial<Options<PostAdminBatchRephraseData>>): UseMutationOptions<unknown, PostAdminBatchRephraseError, Options<PostAdminBatchRephraseData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminBatchRephraseError, Options<PostAdminBatchRephraseData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchRephrase({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchTopicExplanationsMutation = (options?: Partial<Options<PostAdminBatchTopicExplanationsData>>): UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicExplanationsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostAdminBatchTopicExplanationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchTopicExplanations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchTranslateMutation = (options?: Partial<Options<PostAdminBatchTranslateData>>): UseMutationOptions<unknown, PostAdminBatchTranslateError, Options<PostAdminBatchTranslateData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminBatchTranslateError, Options<PostAdminBatchTranslateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchTranslate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdminBatchByBatchJobIdMutation = (options?: Partial<Options<DeleteAdminBatchByBatchJobIdData>>): UseMutationOptions<DeleteAdminBatchByBatchJobIdResponse, DeleteAdminBatchByBatchJobIdError, Options<DeleteAdminBatchByBatchJobIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteAdminBatchByBatchJobIdResponse, DeleteAdminBatchByBatchJobIdError, Options<DeleteAdminBatchByBatchJobIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminBatchByBatchJobId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminBatchByBatchJobIdQueryKey = (options: Options<GetAdminBatchByBatchJobIdData>) => createQueryKey('getAdminBatchByBatchJobId', options);

export const getAdminBatchByBatchJobIdOptions = (options: Options<GetAdminBatchByBatchJobIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminBatchByBatchJobId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminBatchByBatchJobIdQueryKey(options)
    });
};

export const getAdminBatchHistoryQueryKey = (options?: Options<GetAdminBatchHistoryData>) => createQueryKey('getAdminBatchHistory', options);

export const getAdminBatchHistoryOptions = (options?: Options<GetAdminBatchHistoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminBatchHistory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminBatchHistoryQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getAdminBatchHistoryInfiniteQueryKey = (options?: Options<GetAdminBatchHistoryData>): QueryKey<Options<GetAdminBatchHistoryData>> => createQueryKey('getAdminBatchHistory', options, true);

export const getAdminBatchHistoryInfiniteOptions = (options?: Options<GetAdminBatchHistoryData>) => {
    return infiniteQueryOptions<unknown, GetAdminBatchHistoryError, InfiniteData<unknown>, QueryKey<Options<GetAdminBatchHistoryData>>, string | Pick<QueryKey<Options<GetAdminBatchHistoryData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAdminBatchHistoryData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAdminBatchHistory({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminBatchHistoryInfiniteQueryKey(options)
    });
};

export const getAdminBatchChildrenByParentIdQueryKey = (options: Options<GetAdminBatchChildrenByParentIdData>) => createQueryKey('getAdminBatchChildrenByParentId', options);

export const getAdminBatchChildrenByParentIdOptions = (options: Options<GetAdminBatchChildrenByParentIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminBatchChildrenByParentId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminBatchChildrenByParentIdQueryKey(options)
    });
};

export const postAdminMonitorBibleBatchByParentIdMutation = (options?: Partial<Options<PostAdminMonitorBibleBatchByParentIdData>>): UseMutationOptions<unknown, PostAdminMonitorBibleBatchByParentIdError, Options<PostAdminMonitorBibleBatchByParentIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminMonitorBibleBatchByParentIdError, Options<PostAdminMonitorBibleBatchByParentIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminMonitorBibleBatchByParentId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminBatchesMonitorAllMutation = (options?: Partial<Options<PostAdminBatchesMonitorAllData>>): UseMutationOptions<unknown, PostAdminBatchesMonitorAllError, Options<PostAdminBatchesMonitorAllData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminBatchesMonitorAllError, Options<PostAdminBatchesMonitorAllData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminBatchesMonitorAll({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminBatchSummaryByParentIdQueryKey = (options: Options<GetAdminBatchSummaryByParentIdData>) => createQueryKey('getAdminBatchSummaryByParentId', options);

export const getAdminBatchSummaryByParentIdOptions = (options: Options<GetAdminBatchSummaryByParentIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminBatchSummaryByParentId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminBatchSummaryByParentIdQueryKey(options)
    });
};

export const deleteAdminExplanationByIdMutation = (options?: Partial<Options<DeleteAdminExplanationByIdData>>): UseMutationOptions<unknown, DeleteAdminExplanationByIdError, Options<DeleteAdminExplanationByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteAdminExplanationByIdError, Options<DeleteAdminExplanationByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminExplanationById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminExplanationRegenerateMutation = (options?: Partial<Options<PostAdminExplanationRegenerateData>>): UseMutationOptions<unknown, PostAdminExplanationRegenerateError, Options<PostAdminExplanationRegenerateData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationRegenerateError, Options<PostAdminExplanationRegenerateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationRegenerate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminExplanationRegenerateByRegenerationIdGenerateMutation = (options?: Partial<Options<PostAdminExplanationRegenerateByRegenerationIdGenerateData>>): UseMutationOptions<unknown, PostAdminExplanationRegenerateByRegenerationIdGenerateError, Options<PostAdminExplanationRegenerateByRegenerationIdGenerateData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationRegenerateByRegenerationIdGenerateError, Options<PostAdminExplanationRegenerateByRegenerationIdGenerateData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationRegenerateByRegenerationIdGenerate({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminExplanationRegenerateByRegenerationIdComparisonQueryKey = (options: Options<GetAdminExplanationRegenerateByRegenerationIdComparisonData>) => createQueryKey('getAdminExplanationRegenerateByRegenerationIdComparison', options);

export const getAdminExplanationRegenerateByRegenerationIdComparisonOptions = (options: Options<GetAdminExplanationRegenerateByRegenerationIdComparisonData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminExplanationRegenerateByRegenerationIdComparison({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminExplanationRegenerateByRegenerationIdComparisonQueryKey(options)
    });
};

export const postAdminExplanationRegenerateByRegenerationIdChooseMutation = (options?: Partial<Options<PostAdminExplanationRegenerateByRegenerationIdChooseData>>): UseMutationOptions<unknown, PostAdminExplanationRegenerateByRegenerationIdChooseError, Options<PostAdminExplanationRegenerateByRegenerationIdChooseData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationRegenerateByRegenerationIdChooseError, Options<PostAdminExplanationRegenerateByRegenerationIdChooseData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationRegenerateByRegenerationIdChoose({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdminExplanationsBulkMutation = (options?: Partial<Options<DeleteAdminExplanationsBulkData>>): UseMutationOptions<unknown, DeleteAdminExplanationsBulkError, Options<DeleteAdminExplanationsBulkData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteAdminExplanationsBulkError, Options<DeleteAdminExplanationsBulkData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminExplanationsBulk({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminExplanationsSetActiveAsDefaultMutation = (options?: Partial<Options<PostAdminExplanationsSetActiveAsDefaultData>>): UseMutationOptions<unknown, PostAdminExplanationsSetActiveAsDefaultError, Options<PostAdminExplanationsSetActiveAsDefaultData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationsSetActiveAsDefaultError, Options<PostAdminExplanationsSetActiveAsDefaultData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationsSetActiveAsDefault({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminExplanationsSetDefaultsActiveMutation = (options?: Partial<Options<PostAdminExplanationsSetDefaultsActiveData>>): UseMutationOptions<unknown, PostAdminExplanationsSetDefaultsActiveError, Options<PostAdminExplanationsSetDefaultsActiveData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationsSetDefaultsActiveError, Options<PostAdminExplanationsSetDefaultsActiveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationsSetDefaultsActive({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminExplanationsSetSpecificVersionActiveMutation = (options?: Partial<Options<PostAdminExplanationsSetSpecificVersionActiveData>>): UseMutationOptions<unknown, PostAdminExplanationsSetSpecificVersionActiveError, Options<PostAdminExplanationsSetSpecificVersionActiveData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminExplanationsSetSpecificVersionActiveError, Options<PostAdminExplanationsSetSpecificVersionActiveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminExplanationsSetSpecificVersionActive({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdminExplanationsInactiveMutation = (options?: Partial<Options<DeleteAdminExplanationsInactiveData>>): UseMutationOptions<unknown, DeleteAdminExplanationsInactiveError, Options<DeleteAdminExplanationsInactiveData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteAdminExplanationsInactiveError, Options<DeleteAdminExplanationsInactiveData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminExplanationsInactive({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminExplanationByIdHistoryQueryKey = (options: Options<GetAdminExplanationByIdHistoryData>) => createQueryKey('getAdminExplanationByIdHistory', options);

export const getAdminExplanationByIdHistoryOptions = (options: Options<GetAdminExplanationByIdHistoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminExplanationByIdHistory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminExplanationByIdHistoryQueryKey(options)
    });
};

export const getAdminExplanationsQueryKey = (options: Options<GetAdminExplanationsData>) => createQueryKey('getAdminExplanations', options);

export const getAdminExplanationsOptions = (options: Options<GetAdminExplanationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminExplanations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminExplanationsQueryKey(options)
    });
};

export const getAdminExplanationsInfiniteQueryKey = (options: Options<GetAdminExplanationsData>): QueryKey<Options<GetAdminExplanationsData>> => createQueryKey('getAdminExplanations', options, true);

export const getAdminExplanationsInfiniteOptions = (options: Options<GetAdminExplanationsData>) => {
    return infiniteQueryOptions<unknown, GetAdminExplanationsError, InfiniteData<unknown>, QueryKey<Options<GetAdminExplanationsData>>, string | Pick<QueryKey<Options<GetAdminExplanationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAdminExplanationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAdminExplanations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminExplanationsInfiniteQueryKey(options)
    });
};

export const getAdminStatsQueryKey = (options?: Options<GetAdminStatsData>) => createQueryKey('getAdminStats', options);

export const getAdminStatsOptions = (options?: Options<GetAdminStatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminStats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminStatsQueryKey(options)
    });
};

export const getAdminPromptsSystemQueryKey = (options?: Options<GetAdminPromptsSystemData>) => createQueryKey('getAdminPromptsSystem', options);

export const getAdminPromptsSystemOptions = (options?: Options<GetAdminPromptsSystemData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminPromptsSystem({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminPromptsSystemQueryKey(options)
    });
};

export const postAdminPromptsSystemMutation = (options?: Partial<Options<PostAdminPromptsSystemData>>): UseMutationOptions<unknown, PostAdminPromptsSystemError, Options<PostAdminPromptsSystemData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminPromptsSystemError, Options<PostAdminPromptsSystemData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminPromptsSystem({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminPromptsUserQueryKey = (options?: Options<GetAdminPromptsUserData>) => createQueryKey('getAdminPromptsUser', options);

export const getAdminPromptsUserOptions = (options?: Options<GetAdminPromptsUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminPromptsUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminPromptsUserQueryKey(options)
    });
};

export const postAdminPromptsUserMutation = (options?: Partial<Options<PostAdminPromptsUserData>>): UseMutationOptions<unknown, PostAdminPromptsUserError, Options<PostAdminPromptsUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminPromptsUserError, Options<PostAdminPromptsUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminPromptsUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminPromptsExplanationTypesQueryKey = (options?: Options<GetAdminPromptsExplanationTypesData>) => createQueryKey('getAdminPromptsExplanationTypes', options);

export const getAdminPromptsExplanationTypesOptions = (options?: Options<GetAdminPromptsExplanationTypesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminPromptsExplanationTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminPromptsExplanationTypesQueryKey(options)
    });
};

export const deleteAdminPromptsSystemByIdMutation = (options?: Partial<Options<DeleteAdminPromptsSystemByIdData>>): UseMutationOptions<unknown, DeleteAdminPromptsSystemByIdError, Options<DeleteAdminPromptsSystemByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteAdminPromptsSystemByIdError, Options<DeleteAdminPromptsSystemByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminPromptsSystemById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putAdminPromptsSystemByIdMutation = (options?: Partial<Options<PutAdminPromptsSystemByIdData>>): UseMutationOptions<unknown, PutAdminPromptsSystemByIdError, Options<PutAdminPromptsSystemByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, PutAdminPromptsSystemByIdError, Options<PutAdminPromptsSystemByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAdminPromptsSystemById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdminPromptsUserByIdMutation = (options?: Partial<Options<DeleteAdminPromptsUserByIdData>>): UseMutationOptions<unknown, DeleteAdminPromptsUserByIdError, Options<DeleteAdminPromptsUserByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteAdminPromptsUserByIdError, Options<DeleteAdminPromptsUserByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminPromptsUserById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putAdminPromptsUserByIdMutation = (options?: Partial<Options<PutAdminPromptsUserByIdData>>): UseMutationOptions<unknown, PutAdminPromptsUserByIdError, Options<PutAdminPromptsUserByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, PutAdminPromptsUserByIdError, Options<PutAdminPromptsUserByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAdminPromptsUserById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putAdminPromptsSystemByIdStatusMutation = (options?: Partial<Options<PutAdminPromptsSystemByIdStatusData>>): UseMutationOptions<unknown, PutAdminPromptsSystemByIdStatusError, Options<PutAdminPromptsSystemByIdStatusData>> => {
    const mutationOptions: UseMutationOptions<unknown, PutAdminPromptsSystemByIdStatusError, Options<PutAdminPromptsSystemByIdStatusData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAdminPromptsSystemByIdStatus({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putAdminPromptsUserByIdStatusMutation = (options?: Partial<Options<PutAdminPromptsUserByIdStatusData>>): UseMutationOptions<unknown, PutAdminPromptsUserByIdStatusError, Options<PutAdminPromptsUserByIdStatusData>> => {
    const mutationOptions: UseMutationOptions<unknown, PutAdminPromptsUserByIdStatusError, Options<PutAdminPromptsUserByIdStatusData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAdminPromptsUserByIdStatus({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminPromptsRestoreDefaultsMutation = (options?: Partial<Options<PostAdminPromptsRestoreDefaultsData>>): UseMutationOptions<unknown, PostAdminPromptsRestoreDefaultsError, Options<PostAdminPromptsRestoreDefaultsData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminPromptsRestoreDefaultsError, Options<PostAdminPromptsRestoreDefaultsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminPromptsRestoreDefaults({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminPromptsPlaygroundMutation = (options?: Partial<Options<PostAdminPromptsPlaygroundData>>): UseMutationOptions<unknown, PostAdminPromptsPlaygroundError, Options<PostAdminPromptsPlaygroundData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAdminPromptsPlaygroundError, Options<PostAdminPromptsPlaygroundData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminPromptsPlayground({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminPromptsExplanationExistingQueryKey = (options: Options<GetAdminPromptsExplanationExistingData>) => createQueryKey('getAdminPromptsExplanationExisting', options);

export const getAdminPromptsExplanationExistingOptions = (options: Options<GetAdminPromptsExplanationExistingData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminPromptsExplanationExisting({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminPromptsExplanationExistingQueryKey(options)
    });
};

export const getAdminTopicsQueryKey = (options?: Options<GetAdminTopicsData>) => createQueryKey('getAdminTopics', options);

export const getAdminTopicsOptions = (options?: Options<GetAdminTopicsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminTopics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminTopicsQueryKey(options)
    });
};

export const postAdminTopicsMutation = (options?: Partial<Options<PostAdminTopicsData>>): UseMutationOptions<unknown, DefaultError, Options<PostAdminTopicsData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostAdminTopicsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminTopics({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdminTopicsByIdMutation = (options?: Partial<Options<DeleteAdminTopicsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteAdminTopicsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteAdminTopicsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAdminTopicsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putAdminTopicsByIdMutation = (options?: Partial<Options<PutAdminTopicsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<PutAdminTopicsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutAdminTopicsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putAdminTopicsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAdminTopicsSortChronologicallyMutation = (options?: Partial<Options<PostAdminTopicsSortChronologicallyData>>): UseMutationOptions<unknown, DefaultError, Options<PostAdminTopicsSortChronologicallyData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostAdminTopicsSortChronologicallyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminTopicsSortChronologically({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAdminCommentaryGradesQueryKey = (options?: Options<GetAdminCommentaryGradesData>) => createQueryKey('getAdminCommentaryGrades', options);

export const getAdminCommentaryGradesOptions = (options?: Options<GetAdminCommentaryGradesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAdminCommentaryGrades({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAdminCommentaryGradesQueryKey(options)
    });
};

export const postAdminCommentaryGradeMutation = (options?: Partial<Options<PostAdminCommentaryGradeData>>): UseMutationOptions<PostAdminCommentaryGradeResponse, PostAdminCommentaryGradeError, Options<PostAdminCommentaryGradeData>> => {
    const mutationOptions: UseMutationOptions<PostAdminCommentaryGradeResponse, PostAdminCommentaryGradeError, Options<PostAdminCommentaryGradeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postAdminCommentaryGrade({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
